openapi: "3.0.0"
info:
  version: 2.0.0
  title: Lichess.org API reference
  x-logo:
    url: https://lichess1.org/assets/favicon.192.png
    backgroundColor: #ffffff
  description: "\n\n# Introduction\nWelcome to the reference for the Lichess API!\n\n\
  \ - Get help in the [lichess developers discord channel](https://discord.gg/pw6Efvk),\
  \ or in the #lichess IRC channel on freenode.\n\
  \ - [Contribute to this documentation on Github](https://github.com/lichess-org/api).\n\
  \ - Check out [lichess widgets to embed in your website](https://lichess.org/developers).\n\
  \ - [Download all lichess rated games](https://database.lichess.org/)\n\
  \n## Endpoint\n\
  \ All requests go to `https://lichess.org`. Language subdomains are deprecated and will be discontinued.\n\
  \ ## Rate limiting\n\
  \ All requests are rate limited using various strategies,\
  \ to ensure the API remains responsive for everyone.\n\
  \ Only make one request at a time.\n\
  \ If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429),\
  \ please wait a full minute before resuming API usage."
  contact:
    url: https://lichess.org
servers:
  - url: https://lichess.org
tags:
- name: Account
  description: Read and write account informations and preferences.
- name: Users
  description: Access registered users on Lichess.
- name: Games
  description: Access games played on Lichess.
- name: Teams
  description: Access Lichess teams and their members.
- name: Chess Bot
  description: "Play on Lichess as a chess engine.\n
  \ Only works with [Bot accounts](#operation/botAccountUpgrade).\n\n\
  \n## Features\n\
  \ - [Stream incoming chess moves](#operation/botGameStream)\n\
  \ - [Play chess moves](#operation/botGameMove)\n\
  \ - [Read](#operation/botGameStream) and [write](#operation/botGameChat) in the player and spectator chats\n\
  \ - [Receive](#operation/apiStreamEvent) and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline)) challenges\n\
  \ - [Abort](#operation/botGameAbort) and [resign](#operation/botGameResign) games\n\
  \n## Integrations\n\
  \ - [Python3 lichess-bot](https://github.com/careless25/lichess-bot) (official)\n\
  \ - [JavaScript bot-o-tron](https://github.com/tailuge/bot-o-tron)\n\
  \ - Yours? Please make [an issue or pull request](https://github.com/lichess-org/api).\n\
  \n## Links\n\
  \ - Join the [Lichess Bots team](https://lichess.org/team/lichess-bots) with your bot account\n\
  \ - [Get help in the discord channel](https://discord.gg/quwueFd)\n\
  \ - Watch [Lichess Bot TV](https://lichess.org/tv/bot)"
- name: Tournaments
  description: Access tournaments played on Lichess.
- name: OAuth
  description: |
    Requests taking advantage of OAuth authentication.
paths:
  /api/users/status:
    get:
      operationId: apiUsersStatus
      summary: Get real-time users status
      description: |
        Read the `online`, `playing` and `streaming` flags of several users.

        This API is very fast and cheap on lichess side.
        So you can call it quite often (like once every 5 seconds).

        Use it to track players and know when they're connected on lichess and playing games.
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: query
          name: ids
          required: true
          description: User IDs separated by commas. Up to 50 IDs.
          schema:
            type: string
          example: aliquantus,chess-network,lovlas
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                      nullable: true
                    online:
                      type: boolean
                      nullable: true
                    playing:
                      type: boolean
                      nullable: true
                    streaming:
                      type: boolean
                      nullable: true
                    patron:
                      type: boolean
                      nullable: true
                example: [
                  {
                    "id": "aliquantus",
                    "name": "Aliquantus"
                  },
                  {
                    "id": "chess-network",
                    "name": "Chess-Network",
                    "title": "NM",
                    "online": true,
                    "playing": true,
                    "streaming": true,
                    "patron": true
                  }
                ]

  /player:
    get:
      operationId: player
      summary: Get all top 10
      tags:
        - Users
      security:
        - None: []
      description: |
        Get the top 10 players for each speed and variant.

        See https://lichess.org/player.
      parameters:
        - $ref: '#/components/parameters/lichess'
      responses:
        200:
          content:
            application/vnd.lichess.v3+json:
              schema:
                $ref: '#/components/schemas/Top10s'

  /player/top/{nb}/{perfType}:
    get:
      operationId: playerTopNbPerfType
      summary: Get one leaderboard
      tags:
        - Users
      security:
        - None: []
      description: |
        Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
        There is no leaderboard for correspondence or puzzles.

        See https://lichess.org/player/top/200/bullet.
      parameters:
        - $ref: '#/components/parameters/lichess'
        - in: path
          name: nb
          description: How many users to fetch
          schema:
            type: integer
            minimum: 1
            maximum: 200
            example: 100
          required: true
        - in: path
          name: perfType
          description: The speed or variant
          schema:
            type: string
            example: bullet
            enum:
              - ultraBullet
              - bullet
              - blitz
              - rapid
              - classical
              - chess960
              - crazyhouse
              - antichess
              - atomic
              - horde
              - kingOfTheHill
              - racingKings
              - threeCheck
          required: true
      responses:
        200:
          content:
            application/vnd.lichess.v3+json:
              schema:
                $ref: '#/components/schemas/Leaderboard'

  /api/user/{username}:
    get:
      operationId: apiUser
      summary: Get user public data
      description: |
        Read public data of a user.
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/user/{username}/activity:
    get:
      operationId: apiUserActivity
      summary: Get user activity
      description: |
        Read data to generate the activity feed of a user.
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              example:
                https://gist.github.com/ornicar/0ee2d2427cb74ed1a35e86f5ba09fabc

  /api/users:
    post:
      operationId: apiUsers
      summary: Get users by ID
      tags:
        - Users
      security:
        - None: []
      description: |
        Get several users by their IDs. Users are returned in the order same order as the IDs.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      requestBody:
        description: User IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "aliquantus,chess-network,lovlas"
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/account:
    get:
      operationId: accountMe
      summary: Get my profile
      description: |
        Public informations about the logged in user.
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: []
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/account/email:
    get:
      operationId: accountEmail
      summary: Get my email address
      description: |
        Read the email address of the logged in user.
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["email:read"]
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                example:
                  email: abathur@mail.org

  /api/account/preferences:
    get:
      operationId: account
      summary: Get my preferences
      description: |
        Read the preferences of the logged in user.

        - https://lichess.org/account/preferences
        - https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:read"]
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'

  /api/account/kid:
    get:
      operationId: accountKid
      summary: Get my kid mode status
      description: |
        Read the kid mode status of the logged in user.

        - https://lichess.org/account/kid
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:read"]
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  kid:
                    type: boolean
                example:
                  kid: false
    post:
      operationId: accountKidPost
      summary: Set my kid mode status
      description: |
        Set the kid mode status of the logged in user.

        - https://lichess.org/account/kid
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:write"]
      parameters:
        - in: query
          name: v
          required: true
          description: Kid mode status
          schema:
            type: boolean
          example: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /game/export/{gameId}:
    get:
      operationId: gamePng
      summary: Export one game
      description: |
        Download one game in PGN or JSON format. Only finished games can be downloaded.
      tags:
        - Games
      security:
        - None: []
      parameters:
        - in: path
          name: gameId
          description: The game ID.
          required: true
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: true
      responses:
        200:
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /games/export/{username}:
    get:
      operationId: gamesExportUsername
      summary: Export games of a user
      description: |
        Download all games of any user in PGN or [ndjson](http://ndjson.org/) format.

        Games are sorted by reverse chronological order (most recent first)

        We recommend streaming the response, for it can be very long.
        https://lichess.org/@/german11 for instance has more than 250,000 games.

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 10 games per second
          - [OAuth2 authenticated](#section/Authentication) request: 20 games per second
          - Authenticated, downloading your own games: 50 games per second
      tags:
        - Games
        - OAuth
      security:
        - None: []
      parameters:
        - in: path
          name: username
          description: The user name.
          schema:
            type: string
          required: true
        - in: query
          name: since
          description: Download games played since this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Account creation date
        - in: query
          name: until
          description: Download games played until this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Now
        - in: query
          name: max
          description: How many games to download. Leave empty to download all games.
          schema:
            type: integer
            minimum: 1
            default: null
        - in: query
          name: vs
          description: "[Filter] Only games played against this opponent"
          schema:
            type: string
        - in: query
          name: rated
          description: "[Filter] Only rated (`true`) or casual (`false`) games"
          schema:
            type: boolean
            default: null
        - in: query
          name: perfType
          description: "[Filter] Only games in these speeds or variants.\n
          \nMultiple perf types can be specified, separated by a comma.\n
          \nExample: blitz,rapid,classical"
          schema:
            type: string
            default: null
            enum:
              - ultraBullet
              - bullet
              - blitz
              - rapid
              - classical
              - correspondence
              - chess960
              - crazyhouse
              - antichess
              - atomic
              - horde
              - kingOfTheHill
              - racingKings
              - threeCheck
        - in: query
          name: color
          description: "[Filter] Only games played as this color."
          schema:
            type: string
            default: null
            enum:
              - white
              - black
        - in: query
          name: analysed
          description: "[Filter] Only games with or without a computer analysis available"
          schema:
            type: boolean
            default: null
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
      responses:
        200:
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /games/export/_ids:
    post:
      operationId: gamesExportIds
      summary: Export games by IDs
      description: |
        Download games by IDs in PGN or [ndjson](http://ndjson.org/) format.

        Games are sorted by reverse chronological order (most recent first)

        The method is `POST` so a longer list of IDs can be sent in the request body.
      tags:
        - Games
      security:
        - None: []
      requestBody:
        description: Game IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "TJxUmbWK,4OtIh2oh,ILwozzRZ"
      parameters:
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
      responses:
        200:
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/stream/games-by-users:
    post:
      operationId: gamesByUsers
      summary: Stream current games
      description: |
        Stream the games played between a list of users, in real time.
        Only games where **both players** are part of the list are included.

        **Games are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      tags:
        - Games
      security:
        - None: []
      requestBody:
        description: User IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: aliquantus,chess-network,lovlas
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                example: {"id":"A5fcMO3k","rated":true,"variant":"standard","speed":"bullet","perf":"bullet","createdAt":1525789431889,"status":20,"clock":{"initial":60,"increment":0,"totalTime":60},"players":{"white":{"userId":"kastorcito","rating":2617},"black":{"userId":"er_or","rating":2288}}}

  /tv/channels:
    get:
      operationId: tvChannels
      summary: Get current TV games
      description: |
        Get basic info about the best games being played for each speed and variant,
        but also computer games and bot games.

        See [lichess.org/tv](https://lichess.org/tv).
      tags:
        - Games
      security:
        - None: []
      responses:
        200:
          content:
            application/json:
              schema:
                example: {"Bot":{"user":{"id":"leelachess","name":"LeelaChess","title":"BOT"},"rating":2660,"gameId":"Zznv9MIl"},"Blitz":{"user":{"id":"lekkerkortook","name":"LekkerKortOok"},"rating":2603,"gameId":"hTJ4v7Mp"},"Racing Kings":{"user":{"id":"chesslo21","name":"chesslo21"},"rating":2123,"gameId":"lgCDl5Of"},"UltraBullet":{"user":{"id":"farmville","name":"Farmville"},"rating":2338,"gameId":"NEY6OQ32"},"Bullet":{"user":{"id":"nurmibrah","name":"nurmiBrah"},"rating":2499,"gameId":"5LgyE516"},"Classical":{"user":{"id":"holden_m_j_thomas","name":"Holden_M_J_Thomas"},"rating":1806,"gameId":"k3oLby6N"},"Three-check":{"user":{"id":"pepellou","name":"pepellou","patron":true},"rating":1978,"gameId":"Og5RCvmu"},"Antichess":{"user":{"id":"maria-bakkar","name":"maria-bakkar"},"rating":2103,"gameId":"toCr41yx"},"Computer":{"user":{"id":"oh_my_goat_im_so_bat","name":"oh_my_goat_Im_so_bat"},"rating":2314,"gameId":"TkI4qZxu"},"Horde":{"user":{"id":"habitualchess","name":"HabitualChess"},"rating":1803,"gameId":"oMofN63H"},"Rapid":{"user":{"id":"denpayd","name":"DenpaYD"},"rating":2289,"gameId":"IcWOl8ee"},"Atomic":{"user":{"id":"meetyourdemise","name":"MeetYourDemise"},"rating":2210,"gameId":"tvMxtCMN"},"Crazyhouse":{"user":{"id":"mathace","name":"mathace"},"rating":2397,"gameId":"i3gTZlUb"},"Chess960":{"user":{"id":"voja_7","name":"voja_7"},"rating":1782,"gameId":"lrXLcedu"},"King of the Hill":{"user":{"id":"nadime","name":"Nadime"},"rating":1500,"gameId":"DsQn8aEV"},"Top Rated":{"user":{"id":"lekkerkortook","name":"LekkerKortOok"},"rating":2603,"gameId":"hTJ4v7Mp"}}

  /api/tournament:
    get:
      operationId: apiTournament
      summary: Get current tournaments
      description: |
        Get recently finished, ongoing, and upcoming tournaments.

        This API is used to display the [Lichess tournament schedule](https://lichess.org/tournament).
      tags:
        - Tournaments
      security:
        - None: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'

  /team/{teamId}/users:
    get:
      operationId: teamIdUsers
      summary: Get members of a team
      description: |
        Members are sorted by reverse chronological order of joining the team (most recent first).

        **Members are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - Users
        - Teams
      security:
        - None: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /streamer/live:
    get:
      operationId: streamerLive
      summary: Get live streamers
      description: |
        Get basic info about currently streaming users.

        This API is very fast and cheap on lichess side.
        So you can call it quite often (like once every 5 seconds).
      tags:
        - Users
      security:
        - None: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                      nullable: true
                    online:
                      type: boolean
                      nullable: true
                    patron:
                      type: boolean
                      nullable: true
                example: [
                  {
                    "id": "aliquantus",
                    "name": "Aliquantus"
                  },
                  {
                    "id": "chess-network",
                    "name": "Chess-Network",
                    "title": "NM",
                    "playing": true,
                    "patron": true
                  }
                ]

  /api/bot/account/upgrade:
    post:
      operationId: botAccountUpgrade
      summary: Upgrade to bot account
      description: |
        Upgrade a lichess player account into a bot account. Only bot accounts can use the bot API.

        The account **cannot have played any game** before becoming a bot account. The upgrade is **irreversible**. The account will only be able to play as a bot.

        To upgrade an account to bot, use the [official lichess-bot client](https://github.com/careless25/lichess-bot), or follow these steps:
        - Create an [API access token](https://lichess.org/account/oauth/token/create) with "Play bot moves" permission.
        - `curl -d '' https://lichess.org/api/bot/account/upgrade -H "Authorization: Bearer <yourTokenHere>"`

        To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
        the `title` field should be set to `BOT`.
      tags:
        - Chess Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/stream/event:
    get:
      operationId: apiStreamEvent
      summary: Stream incoming events
      description: "\n
      \ Stream the events reaching a lichess user in real time.\n\n
      \ Each line is a JSON object containing a `type` field. Possible values are:\n
      \ - `challenge` Incoming challenge\n
      \ - `gameStart` Start of a game\n\n
      \n
      \ When the stream opens, all current challenges and games are sent."
      tags:
        - Chess Bot
      security:
        - OAuth2: []
      responses:
        200:
          content:
            text/plain:
              example: |
                {"type":"challenge","challenge":{"id":"7pGLxJ4F","status":"created","challenger":{"id":"lovlas","name":"Lovlas","title":"IM","rating":2506,"patron":true,"online":true,"lag":24},"destUser":{"id":"thibot","name":"thibot","title":null,"rating":1500,"provisional":true,"online":true,"lag":45},"variant":{"key":"standard","name":"Standard","short":"Std"},"rated":true,"timeControl":{"type":"clock","limit":300,"increment":25,"show":"5+25"},"color":"random","perf":{"icon":"#","name":"Rapid"}}}
                {"type":"gameStart","game":{"id":"1lsvP62l"}}

  /api/bot/game/stream/{gameId}:
    get:
      operationId: botGameStream
      summary: Stream game state
      description: "\
      \ Stream the state of a game being played by a bot.\n\
      \nUse this endpoint to get updates about the game in real-time, with a single request.\n\
      \nEach line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameFull` Full game data. All values are immutable, except for the `state` field.\n
      \ - `gameState` Current state of the game. Immutable values not included.\n
      \ - `chatLine` Chat message sent by a user (or the bot itself) in the `room` \"player\" or \"spectator\".\n\n
      \nThe first line is always of type `gameFull`."
      tags:
        - Chess Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotGameState'

  /api/bot/game/{gameId}/move/{move}:
    post:
      operationId: botGameMove
      summary: Make a move
      description: |
        Make a move in a game being played by a bot.
      tags:
        - Chess Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: move
          required: true
          description: The move to play, in UCI format
          schema:
            type: string
            example: "e2e4"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/chat:
    post:
      operationId: botGameChat
      summary: Write in the chat
      description: |
        Post a message to the player or spectator chat, in a game being played by a bot.
      tags:
        - Chess Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      requestBody:
        description: What to post and where
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                room:
                  type: string
                  enum:
                  - player
                  - spectator
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - room
                - text
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/abort:
    post:
      operationId: botGameAbort
      summary: Abort a game
      description: |
        Abort a game being played by a bot.
      tags:
        - Chess Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/resign:
    post:
      operationId: botGameResign
      summary: Resign a game
      description: |
        Resign a game being played by a bot.
      tags:
        - Chess Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/challenge/{challengeId}/accept:
    post:
      operationId: challengeAccept
      summary: Accept a challenge
      description: |
        Accept an incoming challenge.

        You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
      tags:
        - Chess Bot
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/challenge/{challengeId}/decline:
    post:
      operationId: challengeDecline
      summary: Decline a challenge
      description: |
        Decline an incoming challenge.
      tags:
        - Chess Bot
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

components:
  parameters:
    lichess:
      in: header
      name: Accept
      schema:
        type: string
        default: application/vnd.lichess.v3+json
      required: true
  schemas:
    GameJson:
      example: {
        "id": "q7ZvsdUF",
        "rated": true,
        "variant": "standard",
        "speed": "blitz",
        "perf": "blitz",
        "createdAt": 1514505150384,
        "lastMoveAt": 1514505592843,
        "status": "draw",
        "players": {
          "white": {
            "user": {
              "id": "lance5500",
              "name": "Lance5500",
              "title": "LM",
              "patron": true
              },
            "rating": 2389,
            "ratingDiff": 4
          },
          "black": {
            "id": "Gramatik",
            "name": "gramatik",
            "rating": 2498,
            "ratingDiff": -4
          }
        },
        "opening": {
          "eco":"D31",
          "name":"Semi-Slav Defense: Marshall Gambit",
          "ply":7
        },
        "moves": "d4 d5 c4 c6 Nc3 e6 e4 Nd7 exd5 cxd5 cxd5 exd5 Nxd5 Nb6 Bb5+ Bd7 Qe2+ Ne7 Nxb6 Qxb6 Bxd7+ Kxd7 Nf3 Qa6 Ne5+ Ke8 Qf3 f6 Nd3 Qc6 Qe2 Kf7 O-O Kg8 Bd2 Re8 Rac1 Nf5 Be3 Qe6 Rfe1 g6 b3 Bd6 Qd2 Kf7 Bf4 Qd7 Bxd6 Nxd6 Nc5 Rxe1+ Rxe1 Qc6 f3 Re8 Rxe8 Nxe8 Kf2 Nc7 Qb4 b6 Qc4+ Nd5 Nd3 Qe6 Nb4 Ne7 Qxe6+ Kxe6 Ke3 Kd6 g3 h6 Kd3 h5 Nc2 Kd5 a3 Nc6 Ne3+ Kd6 h4 Nd8 g4 Ne6 Ke4 Ng7 Nc4+ Ke6 d5+ Kd7 a4 g5 gxh5 Nxh5 hxg5 fxg5 Kf5 Nf4 Ne3 Nh3 Kg4 Ng1 Nc4 Kc7 Nd2 Kd6 Kxg5 Kxd5 f4 Nh3+ Kg4 Nf2+ Kf3 Nd3 Ke3 Nc5 Kf3 Ke6 Ke3 Kf5 Kd4 Ne6+ Kc4",
        "clock": {
          "initial": 300,
          "increment": 3,
          "totalTime": 420
        }
      }
    GamePgn:
      example: |
        [Event "Rated Blitz game"]
        [Site "https://lichess.org/fY44h4OY"]
        [Date "2018.03.29"]
        [Round "-"]
        [White "pveldman"]
        [Black "thibault"]
        [Result "1-0"]
        [UTCDate "2018.03.29"]
        [UTCTime "01:38:15"]
        [WhiteElo "1610"]
        [BlackElo "1601"]
        [WhiteRatingDiff "+10"]
        [BlackRatingDiff "-10"]
        [Variant "Standard"]
        [TimeControl "180+0"]
        [ECO "C62"]
        [Opening "Ruy Lopez: Steinitz Defense"]
        [Termination "Normal"]
        [Event "U1700 SuperBlitz Arena"]

        1. e4 { [%clk 0:03:00] } e5 { [%clk 0:03:00] } 2. Nf3 { [%clk 0:02:59] } Nc6 { [%clk 0:02:58] } 3. Bb5 { [%clk 0:02:57] } d6 { [%clk 0:02:55] } 4. h3 { [%clk 0:02:54] } Nf6 { [%clk 0:02:52] } 5. Bxc6+ { [%clk 0:02:52] } bxc6 { [%clk 0:02:49] } 6. d3 { [%clk 0:02:51] } Be7 { [%clk 0:02:46] } 7. O-O { [%clk 0:02:47] } O-O { [%clk 0:02:45] } 8. b3 { [%clk 0:02:45] } d5 { [%clk 0:02:45] } 9. exd5 { [%clk 0:02:33] } cxd5 { [%clk 0:02:40] } 10. Nxe5 { [%clk 0:02:31] } Qd6 { [%clk 0:02:38] } 1-0
    User:
      example: {
        "id": "georges",
        "username": "Georges",
        "title": "NM",
        "online": true,
        "playing": true,
        "streaming": false,
        "createdAt": 1290415680000,
        "seenAt": 1522636452014,
        "profile": {
            "bio": "Free bugs!",
            "country": "EC",
            "firstName": "Thibault",
            "lastName": "Duplessis",
            "links": "github.com/ornicar\r\ntwitter.com/ornicar",
            "location": "On the road"
        },
        "language": "en-GB",
        "perfs": {
            "blitz": {
                "games": 2945,
                "prog": -22,
                "rating": 1609,
                "rd": 60
            },
            "bullet": {
                "games": 2324,
                "prog": -9,
                "rating": 1602,
                "rd": 61
            },
            "chess960": {
                "games": 347,
                "prog": 84,
                "rating": 1554,
                "rd": 66
            },
            "puzzle": {
                "games": 2248,
                "prog": -67,
                "rating": 1737,
                "rd": 63
            },
        },
        "patron": true,
        "disabled" : false,
        "engine" : false,
        "booster" : false,
        "playTime": {
            "total": 3296897,
            "tv": 12134
        }
      }

    UserExtended:
      example: {
        "id": "georges",
        "username": "Georges",
        "title": "NM",
        "online": true,
        "playing": true,
        "streaming": false,
        "createdAt": 1290415680000,
        "seenAt": 1522636452014,
        "profile": {
            "bio": "Free bugs!",
            "country": "EC",
            "firstName": "Thibault",
            "lastName": "Duplessis",
            "links": "github.com/ornicar\r\ntwitter.com/ornicar",
            "location": "On the road"
        },
        "nbFollowers": 2735,
        "nbFollowing": 299,
        "completionRate": 97,
        "language": "en-GB",
        "count": {
            "ai": 531,
            "all": 9265,
            "bookmark": 71,
            "draw": 340,
            "drawH": 331,
            "import": 66,
            "loss": 4480,
            "lossH": 4207,
            "me": 0,
            "playing": 6,
            "rated": 7157,
            "win": 4440,
            "winH": 4378
        },
        "perfs": {
            "blitz": {
                "games": 2945,
                "prog": -22,
                "rating": 1609,
                "rd": 60
            },
            "bullet": {
                "games": 2324,
                "prog": -9,
                "rating": 1602,
                "rd": 61
            },
            "chess960": {
                "games": 347,
                "prog": 84,
                "rating": 1554,
                "rd": 66
            },
            "puzzle": {
                "games": 2248,
                "prog": -67,
                "rating": 1737,
                "rd": 63
            },
        },
        "patron": true,
        "disabled" : false,
        "engine" : false,
        "booster" : false,
        "playTime": {
            "total": 3296897,
            "tv": 12134
        }
      }

    Top10s:
      example: {
        "bullet": [
          {
            "id": "bahadirozen",
            "username": "BahadirOzen",
            "perfs": {
              "bullet": {
                "rating": 3018,
                "progress": 18
              }
            },
            "online": true,
            "title": "FM"
          },
          {
            "id": "penguingim1",
            "username": "penguingim1",
            "perfs": {
              "bullet": {
                "rating": 2983,
                "progress": -36
              }
            },
            "title": "GM",
            "online": true,
            "patron": true
          },
          {
            "id": "night-king96",
            "username": "Night-King96",
            "perfs": {
              "bullet": {
                "rating": 2958,
                "progress": 35
              }
            },
            "title": "GM"
          },
        ],
        "blitz": [],
        "rapid": [],
        "classical": [],
        "ultraBullet": [],
        "chess960": [],
        "crazyhouse": [],
        "antichess": [],
        "atomic": [],
        "horde": [],
        "kingOfTheHill": [],
        "racingKings": [],
        "threeCheck": []
      }

    Leaderboard:
      example: {
        "users": [
          {
            "id": "bahadirozen",
            "username": "BahadirOzen",
            "perfs": {
              "bullet": {
                "rating": 3018,
                "progress": 18
              }
            },
            "online": true,
            "title": "FM"
          },
          {
            "id": "penguingim1",
            "username": "penguingim1",
            "perfs": {
              "bullet": {
                "rating": 2983,
                "progress": -36
              }
            },
            "title": "GM",
            "online": true,
            "patron": true
          },
          {
            "id": "night-king96",
            "username": "Night-King96",
            "perfs": {
              "bullet": {
                "rating": 2958,
                "progress": 35
              }
            },
            "title": "GM"
          },
        ]
      }

    UserPreferences:
      example: {
        "prefs":{
          "dark":true,
          "transp":false,
          "bgImg":"http://media.blizzard.com/sc2/media/wallpapers/wall080/wall080-1920x1080.jpg",
          "is3d":false,
          "theme":"wood2",
          "pieceSet":"go",
          "theme3d":"Light-Wood",
          "pieceSet3d":"Staunton",
          "soundSet":"silent",
          "blindfold":0,
          "autoQueen":2,
          "autoThreefold":2,
          "takeback":3,
          "clockTenths":1,
          "clockBar":true,
          "clockSound":true,
          "premove":true,
          "animation":2,
          "captured":true,
          "follow":true,
          "highlight":true,
          "destination":true,
          "coords":2,
          "replay":2,
          "challenge":3,
          "message":3,
          "coordColor":1,
          "submitMove":0,
          "confirmResign":1,
          "insightShare":2,
          "keyboardMove":0,
          "zen":0,
          "moveEvent":2
        }
    }

    Tournament:
      example: {
        "id": "QITRjufu",
        "fullName": "U1700 SuperBlitz Arena",
        "clock": {
            "increment": 0,
            "limit": 180
        },
        "minutes": 57,
        "rated": true,
        "createdBy": "lichess",
        "system": "arena",
        "secondsToStart": 0,
        "startsAt": 1522803600000,
        "finishesAt": 1522807020000,
        "hasMaxRating": true,
        "nbPlayers": 154,
        "status": 30,
        "perf": {
            "icon": ")",
            "key": "blitz",
            "name": "Blitz",
            "position": 1
        },
        "schedule": {
            "freq": "hourly",
            "speed": "superblitz"
        },
        "variant": {
            "key": "standard",
            "name": "Standard",
            "short": "Std"
        },
        "winner": {
            "id": "camerun10",
            "name": "camerun10",
            "title": null
        }
      }

    BotGameState:
      type: object
      properties:
        state:
          type: object
          properties:
            moves:
              type: string
              description: Current moves in UCI format
            wtime:
              type: integer
              description: Integer of milliseconds White has left on the clock
            btime:
              type: integer
              description: Integer of milliseconds Black has left on the clock
            winc:
              type: integer
              description: Integer of White Fisher increment.
            binc:
              type: integer
              description: Integer of Black Fisher increment.
      example: [
        {
          "type": "gameFull",
          "id": "5IrD6Gzz",
          "rated": true,
          "variant": {
            "key": "standard",
            "name": "Standard",
            "short": "Std"
          },
          "clock": {
            "initial": 1200000,
            "increment": 10000
          },
          "speed": "classical",
          "perf": {
            "name": "Classical"
          },
          "createdAt": 1523825103562,
          "white": {
            "id": "lovlas",
            "name": "lovlas",
            "provisional": false,
            "rating": 2500,
            "title": "IM"
          },
          "black": {
            "id": "leela",
            "name": "leela",
            "rating": 2390,
            "title": null
          },
          "initialFen": "startpos",
          "state": {
            "type": "gameState",
            "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7",
            "wtime": 7598040,
            "btime": 8395220,
            "winc": 10000,
            "binc": 10000
          }
        },
        {
          "type": "gameState",
          "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7 b1c3",
          "wtime": 7598040,
          "btime": 8395220,
          "winc": 10000,
          "binc": 10000
        },
        {
          "type": "chatLine",
          "username": "thibault",
          "text": "Good luck, have fun",
          "room": "player"
        },
        {
          "type": "chatLine",
          "username": "lovlas",
          "text": "!eval",
          "room": "spectator"
        }
      ]

    StreamEvents:
      example: |
        {"type":"challenge","challenge":{"id":"7pGLxJ4F","status":"created","challenger":{"id":"lovlas","name":"Lovlas","title":"IM","rating":2506,"patron":true,"online":true,"lag":24},"destUser":{"id":"thibot","name":"thibot","title":null,"rating":1500,"provisional":true,"online":true,"lag":45},"variant":{"key":"standard","name":"Standard","short":"Std"},"rated":true,"timeControl":{"type":"clock","limit":300,"increment":25,"show":"5+25"},"color":"random","perf":{"icon":"#","name":"Rapid"}}}
        {"type":"gameStart","game":{"id":"1lsvP62l"}}

    Ok:
      properties:
        ok:
          type: boolean
      example:
        ok: true

    Error:
      properties:
        error:
          type: string
          description: The cause of the error.
      example:
        error: "This request is invalid because [...]"

    NotFound:
      properties:
        error:
          type: string
      example:
        error: "Not found."

  securitySchemes:
    OAuth2:
      type: oauth2
      description: "### Authorization Code Flow\n\
        \ The authorization code flow allows your users to **login with lichess**.\n\
        \ - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-authorization-code)\n\
        \ - [NodeJS Passport strategy to login with Lichess OAuth2](https://www.npmjs.com/package/passport-lichess)\n\
        \ - [Create a Lichess OAuth app](https://lichess.org/account/oauth/app)\n\
        \ - [About authorization code flow]( [More info](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2)\n\
        \n### Personal API Token\n\
        \ Personal API tokens allow you to quickly interact with Lichess OAuth API.\n\
        \ - `curl https://lichess.org/api/account -H \"Authorization: Bearer <token>\"`\n\
        \ - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-personal-token)\n\
        \ - [Generate a personal API token](https://lichess.org/account/oauth/token)"
      flows:
        authorizationCode:
          authorizationUrl: https://oauth.lichess.org/oauth/authorize
          tokenUrl: https://oauth.lichess.org/oauth
          scopes:
            "game:read": Download all your games
            "preference:read": Read your preferences
            "preference:write": Write your preferences
            "email:read": Read your email address
            "bot:play": Play chess bot moves. Only for [Bot accounts](#operation/botAccountUpgrade)
    None:
      description: "No authorization required.\n\
        \ For requests that don't need an authenticated user."
      type: none
